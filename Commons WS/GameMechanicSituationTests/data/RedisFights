
Static: {

  items: {
    1: {
      stats: {
        properties: {},
        affinities: {}
      }
    }
  }
  #spells : // ruby
  #statuses : // ruby
  #classes : // json
},

Fights: {

  1: {
    players: {},

    characters: { # each one identified by an ID
      1: {
        class: Assassin,
        baseStats: {
          # peut avoir une clé par élément contenant une liste pour scl,flat,resScl,resFlat
          properties: {
            resource1: 100,
            resource2: 8,
          },
          affinities: {
            fire:   [0,0,0,0],
            water:  [0,0,0,0],
            nature: [0,0,0,0],
            air:    [0,0,0,0],
          }
        },
        items: [24,78,43,90,64], # items IDs
        status : [1,4,5], #
      },
      2: {},
      3: {},
      4: {},
      5: {},
    },

    timeline: [1,2,3,6,7], # characters IDs in order

    board: {
      width: 40,
      length: 40,
      cells: {
        0,0: { # this being the x,y position, maybe x,y,z, so we can get a cell directly from a coordinate
          pos: [1,2,3], # x,y,z
          walkable: true,
          LoS: true,
          status : [],
          # character ?
        },
        0,1: {},
        0,2: {},
      }
    },

    status: {
      1: {
        source: 1, (id of character entity)
        # si on veut un target c'est compliqué
        # faut pouvoir target either une cell ou un character entity
        # donc encore là, ptete qwu les cells sont des entités
        modelID : 53,
        # utilise le templateID pour le nom et la description (lang text)
        # et pour réinitialiser le status lorsqu'on load la fight en mémoire après un crash ou autre
        statusProperties: {
          stacks: 3,
          duration: 2,
          maxStacks: 5, # propriété qui vient du template, mais qu'on copie ici pour pouvoir la modifier
          maxDuration: 4, # propriété qui vient du template, mais qu'on copie ici pour pouvoir la modifier
          canDebuff: true, # propriété qui vient du template, mais qu'on copie ici pour pouvoir la modifier
        }
        stats: {
          properties: {}, # hp, pa, pm etc
          affinities: {} # éléments
        },
        # chaque handler s'associe à un ou plusieurs effets
        # et on se sert des conditions de l'effet lui-même pour conditionner leur application
        # plutôt que de coder des conditions ou autre dans le lambda handler
        # ainsi c'est facile à sérializer sur redis car le code est contenu dans le template de l'effet en ruby
        # donc on doit enregistrer de quel template l'effet vien pour pouvoir le réinstancier en cas de crash

        effects: {
          1: {
            model:
            type: damage1,
            source: 1,
            type: dot,
            ele: dark,
            scl: 50,
            flat: 20,
            effectMatrix: [1],
            conditionMatrix: [0],
            # ok, je me disais que c'est très débatable d'avoir une effectMatrix pour ça dans un statut,
            # mais on peut aussi juste donner une matrix de une case qui vise seulement le target : [1]
            # pcq on pourrait aussi donner une AoE à l'effet pour quand on le proc dans les handlers
            # exemple un buff qui fait exploser le perso quand il meurt et fait des dommages autour de lui
            # ou un buff qui soigne les alliés autour de la cible en croix : [[0,1,0], [1,0,1], [0,1,0]] (heal les 4 alliés au cac mais pas le holder lui-même)

            # et puis l'effet qui *applique* le statut n'est pas le meme que l'effet que le statut applique
            # new DamageEffect()
            # new StatusEffect({dmgEffect}, onEndTurn)   # style list<effect> et list<trigger> , mais en sachant quel trigger applique quel effet (use lambda)
            # StatusEffect.apply(target)                 #  -> target recoit un statut
            # proc un handler du status effect -> le handler proc le damage effect : dmgEffect.applyAoe(target)
            # gg
            # peut aussi utiliser qqc comme statusEffect.register((OnEndTurn e) -> {}); ou new StatusEffect((OnEndTurn e) -> {});

            # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            # maybe I should use redis or rabbitmq or kafka to register events
            # and handlers so that they're accessible from everywhere on the network and safe from crashes
            # this solves the problem of persistance and transfer of handlers between server instances, maybe,... if it works
            # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

            # statuts peuvent aussi modifier des choses juste par leur présence,
            # ex si qqn a un kunai dans le corps,
            # le statut ne fait rien en lui même, pas besoin de handlers,
            # mais des sorts se servent du statut depuis l'extérieur

            # devrait par contre peut-être juste avoir une liste d'id d'effets dans le status
            # et mettre les instances d'effets dans une section à part
          }
        },
        # pas besoin de sérializer la plupart des handlers s'ils sont instanciés à l'instanciation du statut dans le ruby
        handlers: {
          onDebuff: {

          },
          onEndTurn: {

          },
          onStartTurn: {

          },
          onDie: {

          },
          onStatChange: {
              // how to gain stats when low hp
              if(changed = hp && becamelowHP) {
                statusStats = 60;
              } else {
                statusStats = 0;
              }
          }
          onTakeDamage: { #taking damage and losing hp can be different (ex losing hp because it's a spell cost or because you transfer it to an ally)

          },
        }
      }
    }

  },

  2: {},
}
