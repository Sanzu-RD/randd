

Status

DmgInstance {
  Character source, target,;
  Damages type;
  ElementValue dmg;
}

Spell . apply (cell target):
  effect.applyAoe(targetCell)
  //
  source.post(useManaEvent(spell.cost)) // by having this event, you can have a status to reduce spellcost or redirect it to another player etc

// pas réellement besoin de ça car on peut juste l'écrire hardcode dans le script du spell ?
//DamageEffect . targetConditions(entity source, entity target)
//  def implementation :
//    ex un effet qui proc un gros soin if spell.source.stats.hp < 50%
//    ex un effet qui proc un execute if target.stats.hp < 10%

DamageEffect . applyAoe(source, cell target) :
  entities = board.getTargets(targetCell, effectMatrix, entityFlags)
  //entities = entities.filter(t -> targetConditions(source, t))
  entities.foreach(e -> apply(e));

DamageEffect . apply(character target) :

  // calcule les dmgs en partant et créé une dmg instance
  dmgInstance = new DmgInstance(source, target, type, dmg)

  // modifie l'instance de dmg via les receiver enregistrés par les statuts
  source.post(dmgInstance)
  target.post(dmgInstance)

  // applique la dmg instance
  applyDamage()

  // proc les onHit/onDot ..
  // proc les onhit du target en premier vu qu'on a déjà fait le hit du sort lui-même
  target.post(onHitRcv)
  // puis proc les onhit de la source ensuite pour que ceux-cis puissent proc les onhits du target une deuxième fois (s'il y a des dmg onhit)
  source.post(onHitSomeone)


character.register()
  onRecvDmg(dmgInstance) - instance 1 du statut 1
    -> modifie l'instance de dmg (change soit le target ou l'EleValue de dmg)
  onRecvDmg(dmgInstance) - instance 2 du statut 2
    -> réduit les dmg ou w/e
  onRecvHit
    -> proc un soin ou w/e
  onUseMana
    -> peut avoir des modificateurs
    -> défaut : source.mana -= event.mana

  OnHit(source, target, EleValue?)
