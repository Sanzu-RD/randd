package com.souchy.randd.mockingbird.lapismock.screens;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.graphics.g3d.utils.CameraInputController;
import com.souchy.randd.ebishoal.commons.lapis.gfx.screen.RenderOptions;

public class MockScreen6 extends SapphireSetupScreen {

	
	@Override
	protected void act(float delta) {
		super.act(delta);
	}
	
	/**
	 * this is equivalent to LapisScreen.render
	 */
	@Override
	public void render(float delta) {
		// update input controller
		if(getInputProcessor() != null && getInputProcessor() instanceof CameraInputController) 
			((CameraInputController) getInputProcessor()).update();
		
		// act
		act(delta);
		
		bigblockrender(delta);
	}
	
	/**
	 * This is equivalent to LapisScreenRenderer.render
	 */
	private void bigblockrender(float delta) {

		// cull shadows and render shadow map into its own fbo
		if(RenderOptions.cullback) Gdx.gl20.glCullFace(GL20.GL_FRONT);
		if(RenderOptions.activateShadows) renderShadowsContainer();
		if(RenderOptions.cullback) Gdx.gl.glCullFace(GL20.GL_BACK);
		
		// render world and pfx in an FBO for later post-process
		getFBO().begin();
		{
			// clear the screen with a transparent background for the fbo
			clearScreen(0, 0, 0, 0);
			
			cleanSpriteBatch.begin();
			{
				if(RenderOptions.renderBackground) 
					drawBackground(cleanSpriteBatch);
			}
			cleanSpriteBatch.end();
			
			// world
			renderWorldContainer();
			// particle effects
			renderParticleEffectsContainer();
			// particle effects effekseer... either i get fbo or transparency.... even the fire has straight lines at the bottom of particles and we dont have distortion in the shader
			renderEffekseer(delta);
		}
		getFBO().end();

		// obtain the image generated by the fbo
		// fbo uses lower left, TextureRegion uses upper-left
		Texture tex = (RenderOptions.onlyShadowMap && getShadowLight() != null) ? getShadowLight().getFrameBuffer().getColorBufferTexture() : getFBO().getColorBufferTexture();
		var fboRegion = new TextureRegion(tex);
		fboRegion.flip(false, true);
		
		// sprite batch with post processing or not 
		var spriteBatch = RenderOptions.activatePP ? getSpriteBatch() : cleanSpriteBatch;
		
		// render the resulting texture through the sprite batch of the post-processor
		spriteBatch.begin();
		{
			// clear the screen with the getBackgroundColor()
			clearScreen();
			// start with the background
//			if(RenderOptions.renderBackground) drawBackground(spriteBatch);
			// draw the world texture
			spriteBatch.draw(fboRegion, 0, 0);
			//else getSpriteBatch().draw(fboRegion, getViewport().getScreenX(), getViewport().getScreenY());
		}
		spriteBatch.end();

		// render lines
		if(RenderOptions.renderLines/* getLining() != null */) getLining().renderLines();
		
		// render UI
		if(RenderOptions.renderUI) renderView(delta);
	}
	
}
